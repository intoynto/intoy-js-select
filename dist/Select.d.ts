import React from "react";
import { ISelectProps, ISelectState, Ioption } from "./types";
declare class Select<P extends ISelectProps, S extends ISelectState> extends React.Component<P, S> {
    protected _id: string;
    protected _id_options: string;
    protected ndSelect: HTMLDivElement | null;
    protected ndInput: HTMLInputElement | null;
    protected ndDrobBox: HTMLDivElement | null;
    protected selectedValues: any[];
    protected options: Ioption[];
    protected options_b: string[];
    protected _lsoutside: boolean;
    protected _lsenter: boolean;
    protected isMobile: boolean;
    protected cmbSelect: any;
    constructor(props: P);
    protected gState: (props: P) => S;
    protected athProps: (props?: P) => void;
    protected prepValues: (props?: P) => boolean;
    protected callChange: () => boolean;
    protected callConfirmChange: (value: string, method: "add" | "delete") => boolean;
    protected syncCallChange: (cb?: () => void) => void;
    protected onInputFocus: (e: React.FocusEvent<HTMLInputElement>) => void;
    protected onClPopMobile: (e?: React.MouseEvent) => void;
    protected onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    protected onInputBlur: (e: React.FocusEvent<HTMLInputElement>) => void;
    protected hideOutSideClick: (e: MouseEvent) => void;
    protected onInputKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    protected onClickSelect: (opt: Ioption) => void;
    protected onClickRem: (opt?: Ioption) => void;
    protected onClickRemLast: (e?: React.MouseEvent) => void;
    protected onToggleOpen: (e?: React.MouseEvent) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prev: Readonly<P>, prevState: Readonly<S>, snapshot?: any): void;
    protected rdrPortalDropDown: () => React.JSX.Element;
    protected rdrDropDown: () => React.JSX.Element;
    render(): React.JSX.Element;
}
export default Select;
